<% environment.context_class.instance_eval { include Seek::Util.routes } %>

var NelsTree = {

    selectNelsTreeNode: function (nodeId) {
        $j('#' + nodeId + ' > a').click();
    },
    bindNelsTreeNodeLinks: function () {
        $j('[data-role="nels-tree-node-link"]').on('click', function () {
            let nodeId = $j(this).data('tree-node-id');
            NelsTree.selectNelsTreeNode(nodeId);
        });
    },
    showSubtype: function (projectId, datasetId, subtype, folder_path, assay_id = null) {
        $j('#nels-dataset').html('').spinner('add').show();
        $j('#nels-content').hide();

        let data = {
            project_id: projectId,
            dataset_id: datasetId,
            subtype: subtype,
            path: folder_path
        }
        if (assay_id) {
            data.assay_id = assay_id
        }

        $j.ajax({
            url: '<%= subtype_nels_path %>',
            data: data,
            success: function (data) {
                $j('#nels-dataset').html(data).spinner('remove');
            }
        });
    },
    saveLastSelectedNode: function (projectId, datasetId = null, subtypeId = null) {
        let val = `project${projectId}`;
        if (datasetId) {
            val = val + `,dataset${datasetId}`;
        }
        if (subtypeId) {
            val = val + `,${subtypeId}`;
        }

        sessionStorage.setItem('nels_tree_state', val);
    },
    reopenLastSelectedNode: function () {
        // Reopen the tree at previous existing location
        if (sessionStorage.getItem("nels_tree_state")) {
            let path = sessionStorage.getItem("nels_tree_state").split(',')

            // // Open all nodes except the last one
            path.slice(0, path.length - 1).forEach(element => {
                NelsTree.waitForElm(`#${element}`).then((elm) => $j("#nels-tree").jstree("open_node", element))
            });
            // // Then select and click the last node in the path
            NelsTree.waitForElm(`#${path[path.length - 1]}`).then((elm) => {
                NelsTree.selectNelsTreeNode(path[path.length - 1]);
            });
        }
    },
    // Waits till the given element is loaded
    waitForElm: function (selector) {
        return new Promise(resolve => {
            if (document.querySelector(selector)) {
                return resolve(document.querySelector(selector));
            }

            const observer = new MutationObserver(mutations => {
                if (document.querySelector(selector)) {
                    resolve(document.querySelector(selector));
                    observer.disconnect();
                }
            });

            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
        });
    },
    bind: function () {
        $j('#nels-tree')
            .bind('loaded.jstree', function () {
            })
            .jstree({
                'core': {
                    'check_callback': true,
                    'force_text': true,
                    'data': {
                        'url': function (node) {
                            if (node.id === '#') {
                                return '<%= projects_nels_path %>';
                            } else {
                                return '<%= datasets_nels_path %>';
                            }
                        },
                        'data': function (node) {
                            if (node.id === '#') {
                                return {};
                            }
                            let data = {id: node.data.id};
                            if ($j('#assay_id').val()) {
                                data.assay_id = $j('#assay_id').val()
                            }
                            return data;

                        },
                        'error': function (error) {
                            $j('#nels-dataset').hide();
                            $j('#nels-content').show();
                            $j('#nels-content').html(HandlebarsTemplates['nels/error'](error));
                            if (error.responseJSON.url) {
                                window.location.href = error.responseJSON.url;
                            }
                        }
                    }
                }
            })
            .on('activate_node.jstree', function (e, data) {
                NelsTreeEvents.nodeActivated(data);
            }).on('load_node.jstree', function (e, data) {
            NelsTreeEvents.nodeLoaded(data);
        }).on('select_node.jstree', function (e, data) {
            NelsTreeEvents.nodeSelected(data);
        });

    }

}

var NelsTreeEvents = {
    nodeActivated: function (data) {
        if (data.node.data.is_subtype) {// subtype selected
            NelsTreeEvents.subTypeSelected(data);
        } else if (data.node.data.is_dataset) {// dataset selected
            NelsTreeEvents.datasetSelected(data);
        } else {// Project selected
            NelsTreeEvents.projectSelected(data);
        }
    },
    nodeLoaded: function (data) {
        if (data.node.id === '#') { // The root node - list of projects
            if (!data.node.children.length) {
                $j('#nels-dataset').hide();
                $j('#nels-content').show();
                $j('#nels-content').html(HandlebarsTemplates['nels/no_projects']);
            } else {
                $j('#nels-dataset').hide();
                $j('#nels-content').show();
            }
        }
    },
    nodeSelected: function (data) {
        if (data.node.data.is_dataset) {// dataset selected
            // open this node and collapse siblings
            data.instance.open_node(data.node);
            let siblings = data.instance.get_node(data.node.parent).children;
            $j(siblings).each(function (index, node) {
                if (node != data.node.id) {
                    data.instance.close_node(node);
                }
            });
        } else {
            data.instance.open_node(data.node);
        }
    },
    subTypeSelected: function (data) {
        $j('#nels-dataset').html('').spinner('add').show();
        $j('#nels-content').hide();

        // For NeLS file browser, project and dataset names are needed
        // Find project parent node, which for subtype will always be the second position
        project_name = $j('#nels-tree').jstree().get_node(data.node.parents[1]).text

        // Save current state
        NelsTree.saveLastSelectedNode(data.node.data.project_id, data.node.data.dataset_id, data.node.data.id);


        //folder_path = sessionStorage.getItem('nels_folder_state');
        folder_path = `Storebioinfo/${project_name}/${data.node.data.dataset_name}/${data.node.data.text}/`;

        NelsTree.showSubtype(data.node.data.project_id, data.node.data.dataset_id, data.node.data.text, folder_path, data.node.data.assay_id);
    },
    datasetSelected: function (data) {
        $j('#nels-dataset').html('').spinner('add').show();
        $j('#nels-content').hide();

        // Save current state
        NelsTree.saveLastSelectedNode(data.node.data.project_id, data.node.data.id);

        const ajaxData = {
            project_id: data.node.data.project_id,
            dataset_id: data.node.data.id
        }
        if (data.node.data.assay_id) {
            ajaxData.assay_id = data.node.data.assay_id;
        }
        $j.ajax({
            url: '<%= dataset_nels_path %>',
            data: ajaxData,
            success: function (data) {
                $j('#nels-dataset').html(data).spinner('remove');
            }
        });
    },
    projectSelected: function (data) {
        $j('#nels-dataset').hide();
        $j('#nels-content').show();

        // Save current state
        NelsTree.saveLastSelectedNode(data.node.data.id);

        $j.ajax({
            url: '<%= project_nels_path %>',
            data: {
                project: data.node.data,
            },
            success: function (data) {
                $j('#nels-content').html(data).spinner('remove');
            }
        });
    }
}