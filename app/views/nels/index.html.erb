<h1>NeLS Browser</h1>

Logged in as <%= @rest_client.user_info['name'] %><br/><br/>

<div class="row">
      <%= button_link_to('Open in NeLS', 'git_repository_search', 'https://test-fe.cbu.uib.no/nels-web/#/sbi-storage',options = {target:'blank'}) %>
</div>

<div class="row">
  <div class="col-sm-3">
    <div id="nels-tree" style="min-height: 300px; border-right: 1px solid #ddd"></div>
  </div>
  <div class="col-sm-9">
    <div id="nels-dataset" style="display: none"></div>
    <div id="nels-content" style="display: none"></div>
  </div>
</div>

<script type="text/javascript">
  $j(document).ready(function () {

    // Waits till the given element is loaded
    function waitForElm(selector) {
      return new Promise(resolve => {
        if (document.querySelector(selector)) {
          return resolve(document.querySelector(selector));
        }

        const observer = new MutationObserver(mutations => {
          if (document.querySelector(selector)) {
            resolve(document.querySelector(selector));
            observer.disconnect();
          }
        });

        observer.observe(document.body, {
          childList: true,
          subtree: true
        });
      });
    }

    // Reopen the tree at previous existing location
    if (sessionStorage.getItem("nels_tree_state")){
      path = sessionStorage.getItem("nels_tree_state").split(',')
      // Open all nodes except the last one
      path.slice(0,path.length-1).forEach(element => {
        waitForElm(`#${element}`).then((elm) => $j("#nels-tree").jstree("open_node", element))
      });
      // Then select and click the last node in the path
      waitForElm(`#${path[path.length-1]}`).then((elm) => {
          $j("#nels-tree").jstree("select_node", path[path.length-1]);
          $j(`#${path[path.length-1]} a`).click()
        });
    }

    $j('#nels-tree')
        .bind('loaded.jstree', function() {})
        .jstree({
          'core': {
            'check_callback': true,
            'force_text': true,
            'data' : {
              'url': function (node) {
                if (node.id === '#') {
                  return '<%= projects_nels_path() -%>';
                } else {
                  return '<%= datasets_nels_path(:assay_id=>params[:assay_id]) -%>';
                }
              },
              'data': function (node) {
                if (node.id === '#') {
                  return { };
                }
                var d = { id: node.data.id };

                if (node.data.project_id) {
                  d.project_id = node.data.project_id
                }
                if (d) return d;
              },
              'error': function (error) {
                $j('#nels-dataset').hide();
                $j('#nels-content').show();
                $j('#nels-content').html(HandlebarsTemplates['nels/error'](error));
                if (error.responseJSON.url) {
                  window.location.href = error.responseJSON.url;
                }
              }
            }
          }
        })
      .on('activate_node.jstree', function (e, data) {
        if (data.node.data.is_subtype) {// subtype selected
          $j('#nels-dataset').html('').spinner('add').show();
          $j('#nels-content').hide();

          // For NeLS file browser, project and dataset names are needed
          // Find project parent node, which for subtype will always be the second position
          project_name = $j('#nels-tree').jstree().get_node(data.node.parents[1]).text

          // Save current state
          sessionStorage.setItem('nels_tree_state',`project${data.node.data.project_id},dataset${data.node.data.dataset_id},${data.node.data.id}`);

          folder_path = `Storebioinfo/${project_name}/${data.node.data.dataset_name}/${data.node.data.text}/`;

          $j.ajax({ url: '<%= subtype_nels_path() -%>',
            data: {
              project_id: data.node.data.project_id,
              dataset_id: data.node.data.dataset_id,
              subtype: data.node.data.text,
              path: folder_path,
            },
            success: function (data) {
              $j('#nels-dataset').html(data).spinner('remove');
            }
          });
        } else if (data.node.data.is_dataset) {// dataset selected
          $j('#nels-dataset').html('').spinner('add').show();
          $j('#nels-content').hide();

          // Save current state
          sessionStorage.setItem('nels_tree_state',`project${data.node.data.project_id},dataset${data.node.data.id}`)

          $j.ajax({ url: '<%= dataset_nels_path(:assay_id=>params[:assay_id]) -%>',
            data: {
              project_id: data.node.data.project_id,
              dataset_id: data.node.data.id,
            },
            success: function (data) {
              $j('#nels-dataset').html(data).spinner('remove');
            }
          });
        } else {// Project selected
          $j('#nels-dataset').hide();
          $j('#nels-content').show();
          $j.ajax({ url: '<%= project_nels_path() -%>',
            data: {
              project: data.node.data,
            },
            success: function (data) {
              $j('#nels-content').html(data).spinner('remove');
            }
          });

        }
    }).on('load_node.jstree', function (e, data) {
      if (data.node.id === '#') { // The root node - list of projects
        if (!data.node.children.length) {
          $j('#nels-dataset').hide();
          $j('#nels-content').show();
          $j('#nels-content').html(HandlebarsTemplates['nels/no_projects']);
        } else {
          $j('#nels-dataset').hide();
          $j('#nels-content').show();
        }
      }
    }).on('select_node.jstree', function (e, data) {
        if (data.node.data.is_dataset) {// dataset selected
            // open this node and collapse siblings
            data.instance.open_node(data.node);
            let siblings = data.instance.get_node(data.node.parent).children;
            $j(siblings).each( function(index, node) {
                if (node != data.node.id) {
                    data.instance.close_node(node);
                }
            });
        }
        else {
            data.instance.toggle_node(data.node);
        }
    });
  });
</script>
